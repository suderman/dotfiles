runtime plugin/source.vim
Source https://github.com/tpope/vim-sensible

" Determine machine (alpha.mydevbox.com, beta.mydevbox.com, something.local)
let hostname = substitute(system('hostname'), '\n', '', '')

" Comma is the leader character
let mapleader = ","

" Basic stuff
set encoding=utf-8                     " always use the good encoding
set mouse=a                            " allow the mouse to be used
set title                              " set the window's title to the current filename
set visualbell                         " no more beeping from Vim
set cursorline                         " highlight current line
set fillchars=vert:│                   " Solid line for vsplit separator
set showmode                           " show what mode (Insert/Normal/Visual) is currently on
set timeoutlen=500
set number                             " show line numbers

" " Terminal
" inoremap <C-a><C-a> <Esc>i
" nnoremap <C-a><C-a> <Esc>i
" vnoremap <C-a><C-a> <Esc>i
" tnoremap <C-a><C-a> <C-\><C-n>
" nnoremap <C-a><C-s> :terminal<CR>
" nnoremap <Leader>t :terminal<CR>
highlight! link TermCursor Cursor
highlight! TermCursor ctermfg=red guifg=red
au TermOpen *  :startinsert
" Source https://github.com/kassio/neoterm

"F12 to activate terminal in window
nnoremap <F10> :term<enter>
tnoremap <F10> <nop>

"shift tabs with F1 and F2
imap <F1> :tabp<enter>
nmap <F1> :tabp<enter>
tmap <F1> <C-\><C-n>:tabp<enter>
imap <F2> :tabn<enter>
nmap <F2> :tabn<enter>
tmap <F2> <C-\><C-n>:tabn<enter>

"use ctrl + hjkl to switch windows
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l
" nnoremap <C-h> <C-w>h
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-l> <C-w>l
" inoremap <C-h> <esc><C-w>h
" inoremap <C-j> <esc><C-w>j
" inoremap <C-k> <esc><C-w>k
" inoremap <C-l> <esc><C-w>l



" function! GoTo()
"   call termopen("nvr -c \"cd $(bfs -type d -nohidden -f \"$(pwd)\" 2>/dev/null | fzf --preview 'tree -C {} | head -200')\" && nvr -c pwd")
" endfunction
" command! GoTo call GoTo()
" nnoremap <C-g> :GoTo<CR>
" augroup terminal
"   autocmd!
"   autocmd TermClose * if getline('$') == 'Exit 0' | close | endif
" augroup end


" Source https://github.com/ipod825/vim-netranger
Source https://github.com/tpope/vim-vinegar

" Browse filesystem with ranger
noremap <leader><space> :term EDITOR="nvr -o" ranger<CR>

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" Remap ; to : in visual mode
nnoremap ; :

Source https://github.com/itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
set noshowmode

set wildmode=list:longest,list:full

" Whitespace
set nowrap
set tabstop=2                           " number of visual spaces per tab
set softtabstop=2                       " number of spaces in tab when editing
set expandtab                           " tabs are spaces!
set shiftwidth=2                        " how many spaces to indent/outdent

" F5 will remove trailing whitespace and tabs
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:retab<CR>

" Use modeline overrides
set modeline
set modelines=10

" Colors
Source https://github.com/morhetz/gruvbox
colorscheme gruvbox
set background=dark

" Directories for session, undo, backup, swp files
let g:vim_pid = $HOME.'/.vim/session/process-'.getpid()
let g:vim_sid = $HOME.'/.vim/session/session'.substitute(expand("%:p:h"),'/','-','g')
silent! call mkdir(g:vim_pid, 'p', 0701)
silent! call mkdir(g:vim_sid, 'p', 0700)

" Track undo and open files
if has('persistent_undo')
  set undofile
  let &undodir=g:vim_sid
endif
let &backupdir=g:vim_pid
let &directory=g:vim_pid

" Track sessions
Source https://github.com/tpope/vim-obsession
command! -bang Session call <SID>session(<bang>0)
function s:session(clear)
  if (a:clear=='0') && filereadable(g:vim_sid."/Session.vim")
    exec "source ".g:vim_sid."/Session.vim"
    if bufexists(1)
      for l in range(1, bufnr('$'))
        if bufwinnr(l) == -1
          exec 'sbuffer ' . l
        endif
      endfor
    endif
  endif
  exec "Obsession ".g:vim_sid
endfunction


" Remember last location in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" Visual shifting (builtin-repeat)
vmap < <gv
vmap > >gv

" Better visual block selecting
set virtualedit+=block
set virtualedit+=insert
set virtualedit+=onemore

" Hide buffers or auto-save?
set hidden       " allow unsaved buffers to be hidden

" Alt-tab between buffers
nnoremap <leader><leader> <c-^>
nmap <leader>6 <C-^>
nmap <leader>^ <C-^>

" Use OS X clipboard
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard
  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif

function! ClipboardYank()
  call system('pbcopy', @@)
endfunction
function! ClipboardPaste()
  let @@ = system('pbpaste')
endfunction
noremap <leader>y y:call ClipboardYank()<cr>
noremap <leader>p :call ClipboardPaste()<cr>p

" Make 'Y' follow 'D' and 'C' conventions'
nnoremap Y y$

" sudo & write if you forget to sudo first
cmap w!! w !sudo tee % >/dev/null

"============="

" Let split windows be different sizes
set noequalalways


" Smart way to move between windows. Ctrl-[h,j,k,l]
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" If in Visual Mode, resize window instead of changing focus. Ctrl-[h,j,k,l]
vnoremap <c-j> <c-w>+
vnoremap <c-k> <c-w>-
vnoremap <c-h> <c-w><
vnoremap <c-l> <c-w>>

" Let directional keys work in Insert Mode. Ctrl-[h,j,k,l]
inoremap <c-j> <Down>
inoremap <c-k> <Up>
inoremap <c-h> <Left>
inoremap <c-l> <Right>

" Cursor movement in command mode
cnoremap <c-j> <Down>
cnoremap <c-k> <Up>
cnoremap <c-h> <Left>
cnoremap <c-l> <Right>
cnoremap <c-x> <Del>
cnoremap <c-z> <BS>
cnoremap <c-v> <c-r>"

"============="
"

Source https://github.com/bruno-/vim-husk


" Multiple Cursors
Source https://github.com/terryma/vim-multiple-cursors


"============="
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<CR>

" Move to the next misspelled word
map <leader>sn ]s

" Move to the previous misspelled word
map <leader>sp [s

" Add word to dictionary
map <leader>sa zg

" View spelling suggestions for misspelled word
map <leader>s? z=

"============="

" Searching
" -----------------------------
set hlsearch
set ignorecase
set smartcase
set gdefault

" Shows what match number/total we're at when searching
Source https://github.com/vim-scripts/IndexedSearch

" Clear search with comma-space
noremap <leader>/ :noh<CR>:match none<CR>:2match none<CR>:3match none<CR>

" fzf fuzzy finder
set rtp+=/usr/local/opt/fzf
set rtp+=/home/linuxbrew/.linuxbrew/opt/fzf
Source https://github.com/junegunn/fzf.vim
nnoremap <C-t> <ESC>:Files<CR>
" nnoremap <C-g> <ESC>:Buffers<CR>
nnoremap <C-i> <ESC>:Lines<CR>

" Find and Replace
Source https://github.com/brooth/far.vim
nnoremap <C-f> <ESC>:Farp<CR>

" Ag - The Silver Searcher
Source https://github.com/rking/ag.vim

" Use Ag instead of Grep when available
if executable("ag")
  set grepprg=ag\ -H\ --nogroup\ --nocolor
  nnoremap <leader>a :Ag ""<left>
endif

Source https://github.com/mhinz/vim-grepper
nnoremap <leader>g :Grepper<cr>
let g:grepper = { 'next_tool': '<leader>g' }

"============="

" ,u will show undo history graph
Source https://github.com/sjl/gundo.vim
nnoremap <leader>u :GundoToggle<CR>
let g:gundo_right = 1

"============="

Source https://github.com/jlanzarotta/bufexplorer

command! Buffers call s:Buffers()
function! s:Buffers()
  let l:title = expand("%:t")
  if (l:title == '[BufExplorer]')
    :b#
  else
    :silent BufExplorer
  endif
endfunction

nmap <S-k> :Buffers<CR>

"============="

Source https://github.com/justinmk/vim-sneak
" Vim-Sneak (type s followed by two characters)
let g:sneak#streak = 1
let g:sneak#s_next = 1
" nmap <C-s> <Plug>Sneak_s
" nmap <C-S> <Plug>Sneak_S

"============="

" Unimpaired - see all mappings at :help unimpaired
Source https://github.com/tpope/vim-unimpaired
" cob bgcolor cow softwrap, coc cursorline, cou cursorcolumn, con number, cor relativenumber
" yp yP yo YO yI YA paste with paste toggled on
" []x encode xml, []u encode url, []y encode C string
" []b buffers, []f files, []<Space> blank lines
" []e bubble multiple lines, visual mode mappings below:
vmap _ [egv
vmap + ]egv

"============="

" Show Syntax Errors
Source https://github.com/scrooloose/syntastic
let g:syntastic_enable_signs=1
let g:syntastic_check_on_open=1
let g:syntastic_quiet_messages = {'level': 'warnings'}

" Highlight matching tags while inside
if has('Python')
  Source https://github.com/Valloric/MatchTagAlways.git
endif

"============="

" Ruby Helpers
Source https://github.com/tpope/vim-rails
Source https://github.com/tpope/vim-rake
Source https://github.com/tpope/vim-bundler

"============="


" Auto-close parenthesis and quotes
Source https://github.com/Raimondi/delimitMate

" Auto-close functions, loops, ifs, etc
Source https://github.com/tpope/vim-endwise

" Comment code with gc
Source https://github.com/tomtom/tcomment_vim

"============="

" Git wrapper
Source https://github.com/tpope/vim-git
Source https://github.com/tpope/vim-fugitive
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
Source https://github.com/gregsexton/gitv
let g:Gitv_DoNotMapCtrlKey = 1

" Change working directory to root when a project is dectected (triggered when opening a file)
Source https://github.com/airblade/vim-rooter

" Surround ys" cs"<div> dst, or visual mode with S, . to repeat
Source https://github.com/tpope/vim-surround
Source https://github.com/tpope/vim-repeat

" Quickly align text all nice-like, shortcut with <C-a> in visual mode
Source https://github.com/tsaleh/vim-align
"vnoremap <C-a> :Align

" Prepend , to w b e motions to respect camelCase, hyphen and underscore words
Source https://github.com/bkad/CamelCaseMotion

"============="

" YouCompleteMe autocomplete
" Source https://github.com/Valloric/YouCompleteMe [[ -f ./third_party/ycmd/ycm_core.so ]] || git submodule update --init --recursive && YCM_CORES=1 ./install.py --clang-completer

"============="


Source https://github.com/scrooloose/nerdtree
" NERDTree toggles with ,d
map <Leader>d :NERDTreeToggle \| :silent NERDTreeMirror<CR>
map <Leader>dd :NERDTreeFind<CR>
let NERDTreeIgnore=['\.rbc$', '\~$', '\.xmark\.']
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1
let NERDTreeShowHidden=1

"============="

" Folds
" set foldmethod=indent   "fold based on indent
" set foldnestmax=10      "deepest fold is 10 levels
" au BufWinEnter * let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)'))

" " Tmux-style shortcuts
" map <C-a>1 1gt
" map <C-a>2 2gt
" map <C-a>3 3gt
" map <C-a>4 4gt
" map <C-a>5 5gt
" map <C-a>6 6gt
" map <C-a>7 7gt
" map <C-a>8 8gt
" map <C-a>9 9gt
" map <C-a>- :sp<CR>
" map <C-a>\ :vs<CR>
" map <C-a>t :tabnew<CR>
" map <C-a>c :tabclose<CR>
" map <C-a>m :term<CR>i

" Filetypes and Syntax
"---------------------

" HTML5
Source https://github.com/othree/html5.vim

" " Smarty
" Source https://github.com/theprivileges/smarty.vim
" au BufNewFile,BufReadPost .html set ft=smarty

" Twig
Source https://github.com/lumiliet/vim-twig

" Jade
Source https://github.com/vim-scripts/jade.vim

" CoffeeScript
Source https://github.com/kchmck/vim-coffee-script
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable | set ft=coffee

" Toffee
Source https://github.com/lchi/vim-toffee
au BufNewFile,BufReadPost *.toffee set ft=toffee

" jQuery
Source https://github.com/vim-scripts/jQuery

" CSS
" Source https://github.com/skammer/vim-css-color
Source https://github.com/hail2u/vim-css3-syntax

" LESS
Source https://github.com/groenewege/vim-less
" au BufNewFile,BufReadPost *.less set ft=less

" .ssh/config
au Bufread,BufNewFile {ssh-config} set ft=sshconfig

" .ruby-version
au Bufread,BufNewFile {.rvmrc,rvmrc,.ruby-version,ruby-version} set ft=sh

" .gitconfig
au Bufread,BufNewFile {.gitconfig,gitconfig} set ft=gitconfig

" Ruby special files
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Capfile,config.ru} set ft=ruby

" Markdown
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} set wrap | set wrapmargin=2 | set textwidth=72
Source https://github.com/junegunn/vim-xmark make

" Python
au FileType python  set tabstop=4 textwidth=79

" Dockerfile
Source https://github.com/ekalinin/Dockerfile.vim
au BufRead,BufNewFile {Dockerfile} set ft=Dockerfile

" Makefile
au BufRead,BufNewFile {Makefile} set ft=make | setlocal noexpandtab

" nginx
Source https://github.com/bwangel23/nginx-vim-syntax
au BufRead,BufNewFile {nginx.conf,/etc/nginx/*,/usr/local/nginx/conf/*} setfiletype nginx

" OpenVPN
Source https://github.com/vim-scripts/openvpn
au BufRead,BufNewFile {*.ovpn} setfiletype openvpn

" JavaScript
Source https://github.com/othree/yajs.vim
Source https://github.com/othree/javascript-libraries-syntax.vim
let g:used_javascript_libs = 'jquery,underscore,react,vue'

" " React/JSX
" Source https://github.com/mxw/vim-jsx
" let g:jsx_ext_required = 0

" Toggle betweetn Text and Code writing modes
command! Text inoremap <buffer> . .<C-G>u|
            \ inoremap <buffer> ! !<C-G>u|
            \ inoremap <buffer> ? ?<C-G>u|
            \ setlocal spell spelllang=sv,en
            \     nolist nowrap tw=74 fo=t1|
            \ augroup TEXT|
            \   autocmd InsertEnter <buffer> set fo+=a|
            \   autocmd InsertLeave <buffer> set fo-=a|
            \ augroup END

command! Code silent! iunmap <buffer> .|
            \ silent! iunmap <buffer> !|
            \ silent! iunmap <buffer> ?|
            \ setlocal nospell list nowrap
            \     tw=74 fo=cqr1 showbreak=…|
            \ silent! autocmd! TEXT * <buffer>

au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
" nmap <C-x> :setfiletype xml<CR>gg=G<CR>

" Rewrap paragraph
noremap Q gqip

" Filetype mappings
nmap _vi :setfiletype vim<CR>
nmap _js :setfiletype javascript<CR>
nmap _rb :setfiletype ruby<CR>
nmap _ph :setfiletype php<CR>
nmap _sh :setfiletype sh<CR>
nmap _co :setfiletype coffee<CR>
nmap _cs :setfiletype css<CR>
nmap _le :setfiletype less<CR>
nmap _sm :setfiletype smarty<CR>
nmap _md :setfiletype markdown<CR>
nmap _hm :setfiletype haml<CR>

" :Man pages in Vim
runtime! ftplugin/man.vim

" Launch vimrc with ,v
nmap <leader>v :EditVimRC<CR>
command! EditVimRC call s:EditVimRC()
function! s:EditVimRC()
  let l:title = expand("%:t")
  if (l:title == 'vimrc')
    :edit ~/.vim/gvimrc
  else
    :edit ~/.vim/vimrc
  endif
endfunction

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
